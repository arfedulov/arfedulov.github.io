!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.COLOR_THEMES={DEFAULT:{background:"#FFFFFF",tetrominos:["#D9E5D6","#5FAD56","#FFA630","#F15946","#254E70"]}},e.BOARD_SIZES={width:15,height:25},e.BLOCK_SIZE=30,e.GAP_SIZE=1,e.KEYBOARD_KEYS_SETTINGS={RIGHT:["ArrowRight","d"],LEFT:["ArrowLeft","a"],DOWN:["ArrowDown","s"],ROTATE:["ArrowUp","w"],PAUSE:["Escape","p"],STOP:["CustomStop"],PLAY:["CustomPlay"]},e.DOM_ELEMENT_IDS={CANVAS_ELEMENT:"canvas"}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(2).loadGame()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(3),i=r(4),u=r(0),a=r(6),s=r(0),c=r(7),l=r(8),f={x:Math.floor(u.BOARD_SIZES.width/2),y:-3},h=function(){function t(){var t=this;this.status="stopped",this.colorTheme=s.COLOR_THEMES.DEFAULT,this.step=function(e){t.execMovementListeners(),e-t.lastGameCycle>800&&"running"===t.status&&(t.lastGameCycle=e,t.cycle()),t.tetromino?t.renderer.render(t.tetromino,t.board):t.renderer.render(t.board),"running"===t.status&&window.requestAnimationFrame(t.step)},this.setupControlsListeners(),this.renderer=l.getRenderer(),this.controls=a.getControls(),this.board=o.getBoard(),this.spawnTetromino(),this.lastGameCycle=performance.now(),c.screens.displayStartScreen()}return t.prototype.setupControlsListeners=function(){var t=this;window.addEventListener("keyup",(function(e){var r=e.key;s.KEYBOARD_KEYS_SETTINGS.PLAY.includes(r)&&t.play(),s.KEYBOARD_KEYS_SETTINGS.STOP.includes(r)&&t.stop(),s.KEYBOARD_KEYS_SETTINGS.PAUSE.includes(r)&&t.pause()}))},t.prototype.run=function(){this.status="running",window.requestAnimationFrame(this.step)},t.prototype.pause=function(){"running"===this.status&&(this.status="paused",c.screens.displayPauseScreen())},t.prototype.play=function(){c.screens.hideAll(),this.run()},t.prototype.stop=function(){this.status="stopped",this.resetGame(),c.screens.displayStartScreen()},t.prototype.resetGame=function(){this.board.clear(),this.renderer.clear(),this.spawnTetromino()},t.prototype.spawnTetromino=function(){this.tetromino=i.createTetromino(f,this.colorTheme.tetrominos,this.board)},t.prototype.cycle=function(){this.tetromino&&this.tetromino.isStuck()&&(this.board.addElements(this.tetromino.getElements()),this.spawnTetromino()),this.moveTetrominoDown(),this.destroyFullRows(),this.isGameOver()&&this.stop()},t.prototype.execMovementListeners=function(){this.tetromino&&(this.controls.left&&this.tetromino.moveLeft(),this.controls.right&&this.tetromino.moveRight(),this.controls.down&&this.tetromino.moveDown(),this.controls.rotate&&this.tetromino.rotate())},t.prototype.isGameOver=function(){return this.tetromino&&this.tetromino.isStuck()&&this.tetromino.isOutOfBoard()},t.prototype.destroyFullRows=function(){for(var t=this.board.getRowToDestroy();void 0!==t;)this.board.destroyRow(t),t=this.board.getRowToDestroy()},t.prototype.moveTetrominoDown=function(){this.tetromino&&!this.tetromino.isStuck()&&this.tetromino.moveDown()},t}();e.loadGame=function(){n||(n=new h)}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i,u=r(0),a=function(t){return t.x+","+t.y},s=function(t){var e=n(t.split(",").map(Number),2);return{x:e[0],y:e[1]}},c=function(){function t(){this.table=new Map}return t.prototype.addElements=function(t){var e,r;try{for(var n=o(t),i=n.next();!i.done;i=n.next()){var u=i.value,s=u.x,c=u.y,l=a({x:s,y:c});if(this.table.has(l))throw Error("The position ("+s+", "+c+") on the board is not empty");this.table.set(l,u)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}},t.prototype.destroyRowAndMoveDown=function(t){this.destroyRow(t),this.moveAllDown(t)},t.prototype.isPositionEmpty=function(t){return!this.table.has(a(t))},t.prototype.getElements=function(){return this.table.values()},t.prototype.getFirstFullRow=function(){var t,e,r=Array.from(this.table.keys()).sort((function(t,e){return s(t).y-s(e).y})),i=0,a=n(r,1)[0];try{for(var c=o(r),l=c.next();!l.done;l=c.next()){var f=l.value,h=s(f).y;if(h===s(a).y?i+=1:i=1,a=f,i>=u.BOARD_SIZES.width)return h}}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}},t.prototype.moveAllDown=function(t){var e=this,r=Array.from(this.table.keys()).filter((function(e){return s(e).y<t})),n=r.map((function(t){return e.table.get(t)}));r.forEach((function(t){e.table.delete(t)})),n.forEach((function(t){t.y+=1,e.table.set(a(t),t)}))},t.prototype.destroyRow=function(t){var e=this;Array.from(this.table.keys()).filter((function(e){return s(e).y===t})).forEach((function(t){e.table.delete(t)}))},t}(),l=function(){function t(){this.elements=new c}return t.prototype.clear=function(){this.elements=new c},t.prototype.addElements=function(t){this.elements.addElements(t)},t.prototype.getElements=function(){return this.elements.getElements()},t.prototype.isPositionFilled=function(t){return!this.elements.isPositionEmpty(t)},t.prototype.isPositionInsideBoardOrAbove=function(t){var e=t.x,r=t.y,n=u.BOARD_SIZES.width,o=u.BOARD_SIZES.height;return e>=0&&e<=n-1&&r<=o-1},t.prototype.destroyRow=function(t){this.elements.destroyRowAndMoveDown(t)},t.prototype.getRowToDestroy=function(){return this.elements.getFirstFullRow()},t}();e.getBoard=function(){return i||(i=new l),i}},function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},u=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(i(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0});var a=r(5),s=r(0),c=[function(t,e){var r=t.x,n=t.y;return[{x:r-2,y:n,color:e},{x:r-1,y:n,color:e},{x:r-0,y:n,color:e},{x:r+1,y:n,color:e}]},function(t,e){var r=t.x,n=t.y;return[{x:r-1,y:n,color:e},{x:r-0,y:n,color:e},{x:r-1,y:n+1,color:e},{x:r-0,y:n+1,color:e}]},function(t,e){var r=t.x,n=t.y;return[{x:r-0,y:n-1,color:e},{x:r-0,y:n-0,color:e},{x:r-0,y:n+1,color:e},{x:r+1,y:n+1,color:e}]},function(t,e){var r=t.x,n=t.y;return[{x:r-1,y:n-1,color:e},{x:r-1,y:n-0,color:e},{x:r-0,y:n-0,color:e},{x:r-0,y:n+1,color:e}]},function(t,e){var r=t.x,n=t.y;return[{x:r-1,y:n-0,color:e},{x:r-0,y:n-0,color:e},{x:r+1,y:n-0,color:e},{x:r-0,y:n+1,color:e}]}],l={down:{tx:0,ty:1},left:{tx:-1,ty:0},right:{tx:1,ty:0}},f=function(){function t(t){var e=t.initialPosition,r=t.color,o=t.initialRotation,i=t.board,u=t.type;this.pivot=n({},e),this.board=i,this.stuck=!1,this.elements=c[u](e,r),this.applyRotation(o)}return t.prototype.isStuck=function(){return this.stuck},t.prototype.isOutOfBoard=function(){var t,e;try{for(var r=o(this.elements),n=r.next();!n.done;n=r.next()){if(n.value.y<0)return!0}}catch(e){t={error:e}}finally{try{n&&!n.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return!1},t.prototype.getElements=function(){return u(this.elements)},t.prototype.moveRight=function(){this.move("right")},t.prototype.moveLeft=function(){this.move("left")},t.prototype.moveDown=function(){this.move("down")},t.prototype.rotate=function(){var t=Math.PI/2;this.canRotate(t)&&this.applyRotation(t)},t.prototype.canRotate=function(t){var e,r;try{for(var n=o(this.elements),i=n.next();!i.done;i=n.next()){var u=i.value,c=u.x,l=u.y,f=a.computeRotatedPoint({x:c,y:l},this.pivot,t);if(!(f.x>=0&&f.x<s.BOARD_SIZES.width&&f.y<s.BOARD_SIZES.height))return!1}}catch(t){e={error:t}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}return!0},t.prototype.applyRotation=function(t){var e=this;this.elements=this.elements.map((function(r){var o=r.x,i=r.y,u=a.computeRotatedPoint({x:o,y:i},e.pivot,t);return n(n({},r),u)}))},t.prototype.getMovedElements=function(t){return this.elements.map((function(e){var r=e.x,o=e.y,i=l[t],u=i.tx,s=i.ty,c=a.computeTranslatedPoint({x:r,y:o},u,s);return n(n({},e),c)}))},t.prototype.getMovedPivot=function(t){var e=l[t],r=e.tx,n=e.ty;return a.computeTranslatedPoint(this.pivot,r,n)},t.prototype.canMove=function(t){var e,r,n=this.getMovedElements(t);try{for(var i=o(n),u=i.next();!u.done;u=i.next()){var a=u.value,s=a.x,c=a.y;if(!this.board.isPositionInsideBoardOrAbove({x:s,y:c})||this.board.isPositionFilled({x:s,y:c}))return!1}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return!0},t.prototype.move=function(t){this.canMove(t)?(this.elements=this.getMovedElements(t),this.pivot=this.getMovedPivot(t)):"down"===t&&(this.stuck=!0)},t}(),h=[0,1,2,3,4];e.createTetromino=function(t,e,r){var n,o=function(t){return t[Math.floor(Math.random()*t.length)]}(e),i=(n=[0,Math.PI/2,Math.PI,-Math.PI/2])[Math.floor(Math.random()*n.length)],u=h[Math.floor(Math.random()*h.length)];return new f({type:u,initialPosition:t,initialRotation:i,color:o,board:r})}},function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o=r(9);e.computeRotatedPoint=function(t,e,r){var i=o.rotate(r,e.x,e.y),u=o.applyToPoint(i,n({},t));return{x:Math.round(u.x),y:Math.round(u.y)}},e.computeTranslatedPoint=function(t,e,r){var i=o.translate(e,r),u=o.applyToPoint(i,n({},t));return{x:Math.round(u.x),y:Math.round(u.y)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(0),i=function(){function t(){var t=this;this.buttons={right:!1,left:!1,down:!1,rotate:!1},this.onButtonPress=function(e){var r="keydown"===e.type;!function(t){return o.KEYBOARD_KEYS_SETTINGS.LEFT.includes(t.key)}(e)?!function(t){return o.KEYBOARD_KEYS_SETTINGS.RIGHT.includes(t.key)}(e)?!function(t){return o.KEYBOARD_KEYS_SETTINGS.DOWN.includes(t.key)}(e)?function(t){return o.KEYBOARD_KEYS_SETTINGS.ROTATE.includes(t.key)}(e)&&(t.buttons.rotate=r):t.buttons.down=r:t.buttons.right=r:t.buttons.left=r},window.addEventListener("keydown",this.onButtonPress),window.addEventListener("keyup",this.onButtonPress)}return Object.defineProperty(t.prototype,"right",{get:function(){var t=this.buttons.right;return this.buttons.right=!1,t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){var t=this.buttons.left;return this.buttons.left=!1,t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"down",{get:function(){var t=this.buttons.down;return this.buttons.down=!1,t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rotate",{get:function(){var t=this.buttons.rotate;return this.buttons.rotate=!1,t},enumerable:!0,configurable:!0}),t}();e.getControls=function(){return n||(n=new i),n}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(e,"__esModule",{value:!0});var o=r(0),i=n(["start-screen","pause-screen","play-btn","continue-btn","restart-btn"].map((function(t){var e=document.getElementById(t);if(!e)throw Error(t+" element is not found");return e})),5),u=i[0],a=i[1],s=i[2],c=i[3],l=i[4],f=function(t){var e=new KeyboardEvent("keyup",{key:t});window.dispatchEvent(e)};s.addEventListener("click",(function(){var t=n(o.KEYBOARD_KEYS_SETTINGS.PLAY,1)[0];f(t)})),c.addEventListener("click",(function(){var t=n(o.KEYBOARD_KEYS_SETTINGS.PLAY,1)[0];f(t)})),l.addEventListener("click",(function(){var t=n(o.KEYBOARD_KEYS_SETTINGS.STOP,1)[0];f(t)}));var h=function(t){t.style.display="block"},p=function(t){t.style.display="none"};e.screens={displayStartScreen:function(){p(a),h(u)},displayPauseScreen:function(){p(u),h(a)},hideAll:function(){[u,a].forEach(p)}}},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var o,i=r(0),u=function(t){return t*i.BLOCK_SIZE},a=function(t,e){var r=e.x,n=e.y,o=e.color;t.fillStyle=o,t.fillRect(u(r)+i.GAP_SIZE,u(n)+i.GAP_SIZE,i.BLOCK_SIZE-2*i.GAP_SIZE,i.BLOCK_SIZE-2*i.GAP_SIZE)},s=function(){function t(){var t=document.getElementById(i.DOM_ELEMENT_IDS.CANVAS_ELEMENT);if(!t)throw Error("Canvas element is not found");this.renderingContext=t.getContext("2d")}return t.prototype.render=function(){for(var t,e,r,o,i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];this.clear();try{for(var s=n(i),c=s.next();!c.done;c=s.next()){var l=c.value;try{for(var f=(r=void 0,n(l.getElements())),h=f.next();!h.done;h=f.next()){var p=h.value;a(this.renderingContext,p)}}catch(t){r={error:t}}finally{try{h&&!h.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}},t.prototype.clear=function(){this.renderingContext.clearRect(0,0,u(i.BOARD_SIZES.width),u(i.BOARD_SIZES.height))},t}();e.getRenderer=function(){return o||(o=new s),o}},function(t,e,r){"use strict";function n(t,e){return Array.isArray(e)?[t.a*e[0]+t.c*e[1]+t.e,t.b*e[0]+t.d*e[1]+t.f]:{x:t.a*e.x+t.c*e.y+t.e,y:t.b*e.x+t.d*e.y+t.f}}function o(t,e){return e.map(e=>n(t,e))}function i(t){return{a:parseFloat(t.a),b:parseFloat(t.b),c:parseFloat(t.c),d:parseFloat(t.d),e:parseFloat(t.e),f:parseFloat(t.f)}}r.r(e),r.d(e,"applyToPoint",(function(){return n})),r.d(e,"applyToPoints",(function(){return o})),r.d(e,"fromObject",(function(){return i})),r.d(e,"fromString",(function(){return a})),r.d(e,"identity",(function(){return s})),r.d(e,"inverse",(function(){return c})),r.d(e,"isAffineMatrix",(function(){return h})),r.d(e,"rotate",(function(){return x})),r.d(e,"rotateDEG",(function(){return E})),r.d(e,"scale",(function(){return w})),r.d(e,"shear",(function(){return g})),r.d(e,"skew",(function(){return A})),r.d(e,"skewDEG",(function(){return _})),r.d(e,"toCSS",(function(){return O})),r.d(e,"toSVG",(function(){return M})),r.d(e,"toString",(function(){return T})),r.d(e,"transform",(function(){return y})),r.d(e,"compose",(function(){return d})),r.d(e,"translate",(function(){return p})),r.d(e,"fromTriangles",(function(){return R})),r.d(e,"smoothMatrix",(function(){return P})),r.d(e,"fromDefinition",(function(){return I})),r.d(e,"fromTransformAttribute",(function(){return F}));const u=/^matrix\(\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*\)$/i;function a(t){const e=t.match(u);if(null===e||e.length<7)throw new Error(`'${t}' is not a matrix`);return{a:parseFloat(e[1]),b:parseFloat(e[2]),c:parseFloat(e[3]),d:parseFloat(e[4]),e:parseFloat(e[5]),f:parseFloat(e[6])}}function s(){return{a:1,c:0,e:0,b:0,d:1,f:0}}function c(t){const{a:e,b:r,c:n,d:o,e:i,f:u}=t,a=e*o-r*n;return{a:o/a,b:r/-a,c:n/-a,d:e/a,e:(o*i-n*u)/-a,f:(r*i-e*u)/a}}function l(t){return void 0===t}function f(t){return"number"==typeof t&&!Number.isNaN(t)&&Number.isFinite(t)}function h(t){return"object"==typeof(e=t)&&null!==e&&!Array.isArray(e)&&"a"in t&&f(t.a)&&"b"in t&&f(t.b)&&"c"in t&&f(t.c)&&"d"in t&&f(t.d)&&"e"in t&&f(t.e)&&"f"in t&&f(t.f);var e}function p(t,e=0){return{a:1,c:0,e:t,b:0,d:1,f:e}}function y(...t){const e=(t,e)=>({a:t.a*e.a+t.c*e.b,c:t.a*e.c+t.c*e.d,e:t.a*e.e+t.c*e.f+t.e,b:t.b*e.a+t.d*e.b,d:t.b*e.c+t.d*e.d,f:t.b*e.e+t.d*e.f+t.f});switch((t=Array.isArray(t[0])?t[0]:t).length){case 0:throw new Error("no matrices provided");case 1:return t[0];case 2:return e(t[0],t[1]);default:{const[r,n,...o]=t;return y(e(r,n),...o)}}}function d(...t){return y(...t)}const{cos:v,sin:m,PI:b}=Math;function x(t,e,r){const n=v(t),o=m(t),i={a:n,c:-o,e:0,b:o,d:n,f:0};return l(e)||l(r)?i:y([p(e,r),i,p(-e,-r)])}function E(t,e,r){return x(t*b/180,e,r)}function w(t,e){return l(e)&&(e=t),{a:t,c:0,e:0,b:0,d:e,f:0}}function g(t,e){return{a:1,c:t,e:0,b:e,d:1,f:0}}const{tan:S}=Math;function A(t,e){return{a:1,c:S(t),e:0,b:S(e),d:1,f:0}}function _(t,e){return A(t*Math.PI/180,e*Math.PI/180)}function O(t){return T(t)}function M(t){return T(t)}function T(t){return`matrix(${t.a},${t.b},${t.c},${t.d},${t.e},${t.f})`}function P(t,e=1e10){return{a:Math.round(t.a*e)/e,b:Math.round(t.b*e)/e,c:Math.round(t.c*e)/e,d:Math.round(t.d*e)/e,e:Math.round(t.e*e)/e,f:Math.round(t.f*e)/e}}function R(t,e){const r=null!=t[0].x?t[0].x:t[0][0],n=null!=t[0].y?t[0].y:t[0][1],o=null!=e[0].x?e[0].x:e[0][0],i=null!=e[0].y?e[0].y:e[0][1],u=null!=t[1].x?t[1].x:t[1][0],a=null!=t[1].y?t[1].y:t[1][1],s=null!=e[1].x?e[1].x:e[1][0],l=null!=e[1].y?e[1].y:e[1][1],f=null!=t[2].x?t[2].x:t[2][0],h=null!=t[2].y?t[2].y:t[2][1],p=null!=e[2].x?e[2].x:e[2][0],d=null!=e[2].y?e[2].y:e[2][1];return P(y([{a:o-p,b:i-d,c:s-p,d:l-d,e:p,f:d},c({a:r-f,b:n-h,c:u-f,d:a-h,e:f,f:h})]))}function I(t){return Array.isArray(t)?t.map(e):e(t);function e(t){switch(t.type){case"matrix":if("a"in t&&"b"in t&&"c"in t&&"d"in t&&"e"in t&&"f"in t)return i(t);throw new Error("MISSING_MANDATORY_PARAM");case"translate":if(!("tx"in t))throw new Error("MISSING_MANDATORY_PARAM");return"ty"in t?p(t.tx,t.ty):p(t.tx);case"scale":if(!("sx"in t))throw new Error("MISSING_MANDATORY_PARAM");return"sy"in t?w(t.sx,t.sy):w(t.sx);case"rotate":if(!("angle"in t))throw new Error("MISSING_MANDATORY_PARAM");return"cx"in t&&"cy"in t?E(t.angle,t.cx,t.cy):E(t.angle);case"skewX":if(!("angle"in t))throw new Error("MISSING_MANDATORY_PARAM");return _(t.angle,0);case"skewY":if(!("angle"in t))throw new Error("MISSING_MANDATORY_PARAM");return _(0,t.angle);case"shear":if(!("shx"in t&&"shy"in t))throw new Error("MISSING_MANDATORY_PARAM");return g(t.shx,t.shy);default:throw new Error("UNSUPPORTED_DESCRIPTOR")}}}function D(t,e,r,n){this.message=t,this.expected=e,this.found=r,this.location=n,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,D)}function C(t,e){e=void 0!==e?e:{};var r,n={},o={transformList:Y},i=Y,u=/^[eE]/,a=/^[+\-]/,s=/^[0-9]/,c=/^[ \t\r\n]/,l=T("matrix",!1),f=T("(",!1),h=T(")",!1),p=T("translate",!1),y=T("scale",!1),d=T("rotate",!1),v=T("skewX",!1),m=T("skewY",!1),b=T(",",!1),x=R("fractionalConstant"),E=P(["e","E"],!1,!1),w=P(["+","-"],!1,!1),g=P([["0","9"]],!1,!1),S=P([" ","\t","\r","\n"],!1,!1),A=0,_=[{line:1,column:1}],O=[],M=0;if("startRule"in e){if(!(e.startRule in o))throw new Error("Can't start parsing from rule \""+e.startRule+'".');i=o[e.startRule]}function T(t,e){return{type:"literal",text:t,ignoreCase:e}}function P(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function R(t){return{type:"other",description:t}}function I(e){var r,n=_[e];if(n)return n;for(r=e-1;!_[r];)r--;for(n={line:(n=_[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return _[e]=n,n}var C="string"==typeof e.filename&&e.filename.length>0;function F(t,r){var n={};C&&(n.filename=e.filename);var o=I(t);n.start={offset:t,line:o.line,column:o.column};var i=I(r);return n.end={offset:r,line:i.line,column:i.column},n}function k(t){var e=O[O.length-1];A<e.pos||(A>e.pos&&(e.pos=A,e.variants=[]),e.variants.push(t))}function N(t,e,r){return new D(D.buildMessage(t,e),t,e,r)}function Y(){var t,e,r,o,i;for(t=A,e=[],r=H();r!==n;)e.push(r),r=H();for((r=function t(){var e,r,o,i;if(e=A,(r=j())!==n){if(o=[],(i=L())!==n)for(;i!==n;)o.push(i),i=L();else o=n;o!==n&&(i=t())!==n?(e,u=i,e=r.concat(u)):(A=e,e=n)}else A=e,e=n;var u;e===n&&(e=j());return e}())===n&&(r=null),o=[],i=H();i!==n;)o.push(i),i=H();return t,t=r}function j(){var e;return(e=function(){var e,r,o,i,u,a,s,c,p,y,d,v,m,b=function(t){0===M&&k(t)};e=A,b(l),"matrix"===t.substr(A,6)?(r="matrix",A+=6):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(b(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n)if(L()!==n)if((s=G())!==n)if(L()!==n)if((c=G())!==n)if(L()!==n)if((p=G())!==n)if(L()!==n)if((y=G())!==n)if(L()!==n)if((d=G())!==n){for(v=[],m=H();m!==n;)v.push(m),m=H();b(h),41===t.charCodeAt(A)?(m=")",A++):m=n,m!==n?(e,e=[{type:"matrix",a:a,b:s,c:c,d:p,e:y,f:d}]):(A=e,e=n)}else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n;else A=e,e=n}else A=e,e=n}else A=e,e=n;return e}())===n&&(e=function(){var e,r,o,i,u,a,s,c,l,y=function(t){0===M&&k(t)};e=A,y(p),"translate"===t.substr(A,9)?(r="translate",A+=9):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(y(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n){for((s=B())===n&&(s=null),c=[],l=H();l!==n;)c.push(l),l=H();y(h),41===t.charCodeAt(A)?(l=")",A++):l=n,l!==n?(e,v={type:"translate",tx:a},(d=s)&&(v.ty=d),e=[v]):(A=e,e=n)}else A=e,e=n}else A=e,e=n}else A=e,e=n;var d,v;return e}())===n&&(e=function(){var e,r,o,i,u,a,s,c,l,p=function(t){0===M&&k(t)};e=A,p(y),"scale"===t.substr(A,5)?(r="scale",A+=5):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(p(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n){for((s=B())===n&&(s=null),c=[],l=H();l!==n;)c.push(l),l=H();p(h),41===t.charCodeAt(A)?(l=")",A++):l=n,l!==n?(e,v={type:"scale",sx:a},(d=s)&&(v.sy=d),e=[v]):(A=e,e=n)}else A=e,e=n}else A=e,e=n}else A=e,e=n;var d,v;return e}())===n&&(e=function(){var e,r,o,i,u,a,s,c,l,p=function(t){0===M&&k(t)};e=A,p(d),"rotate"===t.substr(A,6)?(r="rotate",A+=6):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(p(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n){for((s=function(){var t,e,r;t=A,L()!==n&&(e=G())!==n&&L()!==n&&(r=G())!==n?(t,t=[e,r]):(A=t,t=n);return t}())===n&&(s=null),c=[],l=H();l!==n;)c.push(l),l=H();p(h),41===t.charCodeAt(A)?(l=")",A++):l=n,l!==n?(e,v={type:"rotate",angle:a},(y=s)&&(v.cx=y[0],v.cy=y[1]),e=[v]):(A=e,e=n)}else A=e,e=n}else A=e,e=n}else A=e,e=n;var y,v;return e}())===n&&(e=function(){var e,r,o,i,u,a,s,c,l=function(t){0===M&&k(t)};e=A,l(v),"skewX"===t.substr(A,5)?(r="skewX",A+=5):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(l(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n){for(s=[],c=H();c!==n;)s.push(c),c=H();l(h),41===t.charCodeAt(A)?(c=")",A++):c=n,c!==n?(e,e=[{type:"skewX",angle:a}]):(A=e,e=n)}else A=e,e=n}else A=e,e=n}else A=e,e=n;return e}())===n&&(e=function(){var e,r,o,i,u,a,s,c,l=function(t){0===M&&k(t)};e=A,l(m),"skewY"===t.substr(A,5)?(r="skewY",A+=5):r=n;if(r!==n){for(o=[],i=H();i!==n;)o.push(i),i=H();if(l(f),40===t.charCodeAt(A)?(i="(",A++):i=n,i!==n){for(u=[],a=H();a!==n;)u.push(a),a=H();if((a=G())!==n){for(s=[],c=H();c!==n;)s.push(c),c=H();l(h),41===t.charCodeAt(A)?(c=")",A++):c=n,c!==n?(e,e=[{type:"skewY",angle:a}]):(A=e,e=n)}else A=e,e=n}else A=e,e=n}else A=e,e=n;return e}()),e}function G(){var e,r,o,i;return e=A,r=A,(o=U())===n&&(o=null),(i=function(){var e,r,o;e=A,(r=function(){var e,r,o,i;(function(t){0===M&&k(t)})(x),M++,e=A,(r=$())===n&&(r=null);46===t.charCodeAt(A)?(o=".",A++):o=n;o!==n&&(i=$())!==n?(e,a=i,e=[(u=r)?u.join(""):null,".",a.join("")].join("")):(A=e,e=n);var u,a;e===n&&(e=A,(r=$())!==n?(46===t.charCodeAt(A)?(o=".",A++):o=n,o!==n?(e,e=r.join("")):(A=e,e=n)):(A=e,e=n));return M--,e}())!==n?((o=Z())===n&&(o=null),e=r=[r,o]):(A=e,e=n);e===n&&(e=A,(r=$())!==n&&(o=Z())!==n?e=r=[r,o]:(A=e,e=n));return e}())!==n?r=o=[o,i]:(A=r,r=n),r!==n&&(e,r=parseFloat(r.join(""))),(e=r)===n&&(e=A,r=A,(o=U())===n&&(o=null),(i=function(){var t,e;t=A,(e=$())!==n&&(t,e=e.join(""));return t=e}())!==n?r=o=[o,i]:(A=r,r=n),r!==n&&(e,r=parseInt(r.join(""))),e=r),e}function B(){var t,e;return t=A,L()!==n&&(e=G())!==n?(t,t=e):(A=t,t=n),t}function L(){var t,e,r,o,i;if(t=A,e=[],(r=H())!==n)for(;r!==n;)e.push(r),r=H();else e=n;if(e!==n){for((r=K())===n&&(r=null),o=[],i=H();i!==n;)o.push(i),i=H();t=e=[e,r,o]}else A=t,t=n;if(t===n)if(t=A,(e=K())!==n){for(r=[],o=H();o!==n;)r.push(o),o=H();t=e=[e,r]}else A=t,t=n;return t}function K(){var e;return function(t){0===M&&k(t)}(b),44===t.charCodeAt(A)?(e=",",A++):e=n,e}function Z(){var e,r,o,i;return e=A,function(t){0===M&&k(t)}(E),u.test(t.charAt(A))?(r=t.charAt(A),A++):r=n,r!==n?((o=U())===n&&(o=null),(i=$())!==n?e=r=[r,o,i]:(A=e,e=n)):(A=e,e=n),e}function U(){var e;return function(t){0===M&&k(t)}(w),a.test(t.charAt(A))?(e=t.charAt(A),A++):e=n,e}function $(){var t,e;if(t=[],(e=X())!==n)for(;e!==n;)t.push(e),e=X();else t=n;return t}function X(){var e;return function(t){0===M&&k(t)}(g),s.test(t.charAt(A))?(e=t.charAt(A),A++):e=n,e}function H(){var e;return function(t){0===M&&k(t)}(S),c.test(t.charAt(A))?(e=t.charAt(A),A++):e=n,e}if(O.push({pos:A,variants:[]}),(r=i())!==n&&A===t.length)return r;throw r!==n&&A<t.length&&k({type:"end"}),function(){var e=O[0],r=e.pos;return N(e.variants,r<t.length?t.charAt(r):null,r<t.length?F(r,r+1):F(r,r))}()}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(D,Error),D.buildMessage=function(t,e){var r={literal:function(t){return'"'+o(t.text)+'"'},class:function(t){var e=t.parts.map((function(t){return Array.isArray(t)?i(t[0])+"-"+i(t[1]):i(t)}));return"["+(t.inverted?"^":"")+e+"]"},any:function(){return"any character"},end:function(){return"end of input"},other:function(t){return t.description},not:function(t){return"not "+u(t.expected)}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function o(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(t){return"\\x0"+n(t)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(t){return"\\x"+n(t)}))}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(t){return"\\x0"+n(t)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(t){return"\\x"+n(t)}))}function u(t){return r[t.type](t)}return"Expected "+function(t){var e,r,n=t.map(u);if(n.sort(),n.length>0){for(e=1,r=1;e<n.length;e++)n[e-1]!==n[e]&&(n[r]=n[e],r++);n.length=r}switch(n.length){case 1:return n[0];case 2:return n[0]+" or "+n[1];default:return n.slice(0,-1).join(", ")+", or "+n[n.length-1]}}(t)+" but "+function(t){return t?'"'+o(t)+'"':"end of input"}(e)+" found."};function F(t){return C(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,